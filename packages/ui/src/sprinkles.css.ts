import { defineProperties, createSprinkles } from "@vanilla-extract/sprinkles";
import { baseTokens, breakpoints } from "./tokens/base.css";

const responsiveProperties = defineProperties({
  conditions: {
    mobile: {},
    tablet: { "@media": `screen and (min-width: ${breakpoints.md})` },
    desktop: { "@media": `screen and (min-width: ${breakpoints.lg})` },
    wide: { "@media": `screen and (min-width: ${breakpoints.xl})` },
  },
  defaultCondition: "mobile",
  properties: {
    display: ["none", "flex", "block", "inline", "inline-block", "grid", "inline-flex"],
    flexDirection: ["row", "column", "row-reverse", "column-reverse"],
    justifyContent: [
      "stretch",
      "flex-start",
      "center",
      "flex-end",
      "space-around",
      "space-between",
      "space-evenly",
    ],
    alignItems: ["stretch", "flex-start", "center", "flex-end", "baseline"],
    gap: baseTokens.space,
    rowGap: baseTokens.space,
    columnGap: baseTokens.space,
    paddingTop: baseTokens.space,
    paddingBottom: baseTokens.space,
    paddingLeft: baseTokens.space,
    paddingRight: baseTokens.space,
    marginTop: baseTokens.space,
    marginBottom: baseTokens.space,
    marginLeft: baseTokens.space,
    marginRight: baseTokens.space,
    fontSize: baseTokens.fontSize,
    lineHeight: baseTokens.lineHeight,
    fontWeight: baseTokens.fontWeight,
    textAlign: ["left", "center", "right", "justify"],
    borderRadius: baseTokens.borderRadius,
    position: ["static", "relative", "absolute", "fixed", "sticky"],
    top: baseTokens.space,
    bottom: baseTokens.space,
    left: baseTokens.space,
    right: baseTokens.space,
    zIndex: baseTokens.zIndex,
    width: {
      auto: "auto",
      full: "100%",
      screen: "100vw",
      fit: "fit-content",
      min: "min-content",
      max: "max-content",
    },
    height: {
      auto: "auto",
      full: "100%",
      screen: "100vh",
      fit: "fit-content",
      min: "min-content",
      max: "max-content",
    },
    maxWidth: {
      none: "none",
      xs: "20rem",
      sm: "24rem",
      md: "28rem",
      lg: "32rem",
      xl: "36rem",
      "2xl": "42rem",
      "3xl": "48rem",
      "4xl": "56rem",
      "5xl": "64rem",
      "6xl": "72rem",
      "7xl": "80rem",
      full: "100%",
      screen: "100vw",
    },
    minHeight: {
      0: "0px",
      full: "100%",
      screen: "100vh",
    },
  },
});

const colorProperties = defineProperties({
  properties: {
    color: {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
    },
    backgroundColor: {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
    },
    borderColor: {
      inherit: "inherit",
      current: "currentColor",
      transparent: "transparent",
    },
  },
});

const unresponsiveProperties = defineProperties({
  properties: {
    cursor: ["default", "pointer", "not-allowed", "grab", "grabbing", "text", "move"],
    userSelect: ["none", "auto", "text", "all"],
    pointerEvents: ["none", "auto"],
    overflow: ["visible", "hidden", "auto", "scroll"],
    overflowX: ["visible", "hidden", "auto", "scroll"],
    overflowY: ["visible", "hidden", "auto", "scroll"],
    boxShadow: {
      ...baseTokens.shadow,
      none: "none",
    },
    borderWidth: baseTokens.borderWidth,
    borderStyle: ["solid", "dashed", "dotted", "none"],
    opacity: {
      0: "0",
      5: "0.05",
      10: "0.1",
      20: "0.2",
      25: "0.25",
      30: "0.3",
      40: "0.4",
      50: "0.5",
      60: "0.6",
      70: "0.7",
      75: "0.75",
      80: "0.8",
      90: "0.9",
      95: "0.95",
      100: "1",
    },
    transform: {
      none: "none",
      "scale-95": "scale(0.95)",
      "scale-100": "scale(1)",
      "scale-105": "scale(1.05)",
      "translate-x-1": "translateX(4px)",
      "translate-y-1": "translateY(4px)",
      "-translate-x-1": "translateX(-4px)",
      "-translate-y-1": "translateY(-4px)",
    },
    transitionProperty: {
      none: "none",
      all: "all",
      colors: "color, background-color, border-color, text-decoration-color, fill, stroke",
      opacity: "opacity",
      shadow: "box-shadow",
      transform: "transform",
      scale: "scale",
    },
    transitionDuration: {
      75: "75ms",
      100: "100ms",
      150: "150ms",
      200: "200ms",
      250: "250ms",
      300: "300ms",
      500: "500ms",
      700: "700ms",
      1000: "1000ms",
    },
    transitionTimingFunction: {
      linear: "linear",
      in: "cubic-bezier(0.4, 0, 1, 1)",
      out: "cubic-bezier(0, 0, 0.2, 1)",
      "in-out": "cubic-bezier(0.4, 0, 0.2, 1)",
    },
    transition: {
      none: "none",
      all: `all ${baseTokens.transition.normal} ease`,
      colors: `color ${baseTokens.transition.normal} ease, background-color ${baseTokens.transition.normal} ease, border-color ${baseTokens.transition.normal} ease`,
      opacity: `opacity ${baseTokens.transition.normal} ease`,
      shadow: `box-shadow ${baseTokens.transition.normal} ease`,
      transform: `transform ${baseTokens.transition.normal} ease`,
    },
  },
});

export const sprinkles = createSprinkles(
  responsiveProperties,
  colorProperties,
  unresponsiveProperties,
);

export type Sprinkles = Parameters<typeof sprinkles>[0];
